####-------------------------------####
source('../fun_0_loadLibrary.R')
####-------------------------------####
source('fun_2_2_trainRF.R')
source('fun_2_3_apply_optimalRF.R')
#-------train RF with tuned parameters on 70% of available observations----------
num.threads <- 8
min.node.size = 5
tuned_mtry <- read.csv('../../../RF/1_tune/tuned_mtry.csv', header=F)
View(tuned_mtry)
subsample <- 1
print(paste0('subsample: ', subsample))
#select subsample predictors
train_data <- vroom(paste0('../../../RF/0_rf_input/', 'subsample_',subsample,
'/train_table_allpredictors.csv'), show_col_type=F)
testStationInfo <- read.csv(paste0('../../../RF/0_rf_input/subsample_',subsample,'/test_stations.csv'))
View(testStationInfo)
outputDir <- paste0('../../../RF/2_train/subsample_',subsample,'/')
dir.create(outputDir, showWarnings = F, recursive = T)
outputDirValidation <- paste0('../../../RF/3_validate/subsample_',subsample,'/')
dir.create(outputDirValidation, showWarnings = F, recursive = T)
#### all predictors ####
#train
print('training: allpredictors...')
#### all predictors ####
#train
print('training: allpredictors...')
rf_input <- train_data %>% select(., -datetime) #here select the wished predictors
mtry <- tuned_mtry[1,subsample]
optimal_ranger <- trainRF(input_table=rf_input, num.trees=500, mtry=mtry)
#~ saveRDS(optimal_ranger, paste0(outputDir,'trainedRF_allpredictors.rds'))
vi_df <- data.frame(names=names(optimal_ranger$variable.importance)) %>%
mutate(importance=optimal_ranger$variable.importance)
View(vi_df)
write.csv(vi_df, paste0(outputDir,'varImportance_allpredictors.csv'), row.names=F)
#run validation script
key='allpredictors'
print(paste0(key,' : calculation initiated...'))
KGE_list <- mclapply(1:nrow(testStationInfo), key=key, apply_optimalRF, mc.cores=1)
View(vi_df)
station_no <- testStationInfo$grdc_no[i]
i=1
station_no <- testStationInfo$grdc_no[i]
print(station_no)
test_data <- read.csv(paste0('../../../data/predictors/pcr_allpredictors/pcr_allpredictors_',
station_no, '.csv'))
View(test_data)
View(rf_input)
setdiff(test_data, vi_df)
rf.result <- test_data %>%
# predict discharge with trained RF
mutate(pcr_corrected = predict(optimal_ranger, test_data) %>% predictions()) %>%
# if pcr_corrected < 0 -> pcr_corrected=0
mutate(pcr_corrected = replace(pcr_corrected, pcr_corrected<0,0)) %>%
# calculate residuals
mutate(res=obs-pcr) %>%
mutate(res_corrected=obs-pcr_corrected) %>%
# move new discharge variables before state variables
relocate(pcr_corrected, .before=precipitation) %>%
relocate(res, .before=precipitation) %>%
relocate(res_corrected, .before=precipitation) %>%
#keep only datetime, obs, pcr, pcr_corrected, res, res_corrected
select(.,datetime:res_corrected)
test_data
colnames((test_data))
rownames(vi_df)
vi_df[,1]
test1 <- vi_df[,1]
test2 <- colnames(test_data)
setdiff(test1,test2)
setdiff(test2, test1)
rf.result <- test_data %>%
# predict discharge with trained RF
mutate(pcr_corrected = predict(optimal_ranger, test_data) %>% predictions()) %>%
# if pcr_corrected < 0 -> pcr_corrected=0
mutate(pcr_corrected = replace(pcr_corrected, pcr_corrected<0,0)) %>%
# calculate residuals
mutate(res=obs-pcr) %>%
mutate(res_corrected=obs-pcr_corrected) %>%
# move new discharge variables before state variables
relocate(pcr_corrected, .before=precipitation) %>%
relocate(res, .before=precipitation) %>%
relocate(res_corrected, .before=precipitation) %>%
#keep only datetime, obs, pcr, pcr_corrected, res, res_corrected
select(.,datetime:res_corrected)
vi_df[,1]
colnames((test_data))
setdiff(test2, test1)
setdiff(test1,test2)
####-------------------------------####
source('../fun_0_loadLibrary.R')
subsample <- '1'
stationInfo <- read.csv(paste0('../../../RF/0_rf_input/subsample_',subsample,
'/train_stations.csv')) %>% arrange(grdc_no)
train_table <- vroom(paste0('../../../RF/0_rf_input/subsample_',subsample,
'/train_table_allpredictors.csv'), show_col_types = F)
subsample <- '1'
stationInfo <- read.csv(paste0('../../../RF/0_rf_input/subsample_',subsample,
'/train_stations.csv')) %>% arrange(grdc_no)
####-------------------------------####
source('../fun_0_loadLibrary.R')
subsample <- '1'
stationInfo <- read.csv(paste0('../../../RF/0_rf_input/subsample_',subsample,
'/train_stations.csv')) %>% arrange(grdc_no)
train_table <- vroom(paste0('../../../RF/0_rf_input/subsample_',subsample,
'/train_table_allpredictors.csv'), show_col_types = F)
for(i in 1:nrow(stationInfo)){
station_no <- stationInfo$grdc_no[i]
print(station_no)
test_data <- read.csv(paste0('../../../data/predictors/pcr_allpredictors/pcr_allpredictors_',
station_no, '.csv')) %>% na.omit(.)
stationInfo$train_contribution[i] <- nrow(test_data) / nrow(train_table)
}
stationInfo$train_contribution <- stationInfo$train_contribution*100
stationInfo <- select(stationInfo, grdc_no, wmo_reg, train_contribution)
for(i in 1:6){
training_WMO_1 <- stationInfo[stationInfo[,'wmo_reg'] == i,]
summit <- sum(training_WMO_1$train_contribution)
print(paste0('% of WMO_reg (', i, ') to training data is: ',summit))
}
#### descriptive statistics of stations ####
stationInfo <- read.csv('../../../data/stationLatLon.csv')
summary(stationInfo$area)
summary(stationInfo$miss)
source("~/PCR-GLOBWB-RF-for-publication/source/R/2_randomForest/2_RF_0_1_check_WMO_training_percentage.R", echo=TRUE)
source("~/PCR-GLOBWB-RF-for-publication/source/R/2_randomForest/2_RF_0_1_check_WMO_training_percentage.R", echo=TRUE)
source("~/PCR-GLOBWB-RF-for-publication/source/R/2_randomForest/2_RF_0_1_check_WMO_training_percentage.R", echo=TRUE)
source("~/PCR-GLOBWB-RF-for-publication/source/R/2_randomForest/2_RF_0_1_check_WMO_training_percentage.R", echo=TRUE)
source("~/PCR-GLOBWB-RF-for-publication/source/R/2_randomForest/2_RF_0_1_check_WMO_training_percentage.R", echo=TRUE)
source("~/PCR-GLOBWB-RF-for-publication/source/R/2_randomForest/2_RF_0_1_check_WMO_training_percentage.R", echo=TRUE)
source("~/PCR-GLOBWB-RF-for-publication/source/R/2_randomForest/2_RF_0_1_check_WMO_training_percentage.R", echo=TRUE)
source("~/PCR-GLOBWB-RF-for-publication/source/R/2_randomForest/2_RF_0_1_check_WMO_training_percentage.R", echo=TRUE)
